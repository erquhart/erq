#!/usr/bin/env node
const path = require('path')
const yargs = require('yargs/yargs')
const { hideBin } = require('yargs/helpers')
const argv = yargs(hideBin(process.argv)).argv
const crypto = require('crypto')
const shell = require('shelljs')
const { v4: uuid } = require('uuid')

const { _: [command, ...args], ...flags } = argv

switch (command) {
  // erq serve path/to/serve
  case 'serve': {
    const [target] = args
    const absoluteTarget = path.resolve(process.cwd(), target)
    shell.exec(`npx serve ${absoluteTarget} -p ${flags.port || 3000}`)
    break
  }

  // erq secret
  case 'secret': {
    crypto.randomBytes(64, (err, buffer) => {
      const secret = buffer.toString('base64')
      console.log(secret)
    })
    break
  }

  // erq uuid
  case 'uuid': {
    console.log(uuid())
    break
  }

  // erq download-video https://www.youtube.com/...
  case 'download-video': {
    const [url] = args
    shell(`youtube-dl -o "~/Downloads/%(title)s.%(ext)s" ${url}`)
    break
  }

  case 'kill': {
    const [port] = args
    shell.exec(`lsof -n -i4TCP:${port} | grep LISTEN | tr -s ' ' | cut -f 2 -d ' ' | xargs kill -9`)
    break
  }

  case 'timestamp': {
    console.log(Date.now())
    break
  }

  case 'ip': {
    shell.exec('ipconfig getifaddr en0')
    break
  }

  case undefined: {
    console.log('please provide a command')
    break
  }

  default: {
    console.log(`command "${command}" not recognized`)
  }
}
